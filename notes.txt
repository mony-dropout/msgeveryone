select rows where
	. the phone starts w 91
	. the name is not empty
fdf=df.dropna(subset=[‘name’])
fdf=fdf[fdf[‘phone’].str.startswith(’91’)]

filter rows where the name contains the substring bhaiya
haha
fdf=df[df[‘name’].str.contains(‘bhaiya’)]
add a coloumn to indicate where the phone is missing
for i, r in df.iterrows():
	if df[‘phone’]~NaN:
		df[‘phone_exist’]=true;
	else:
		df[‘phone_exist’]=false;
ORRR (i guess the only issue is i dont know how ot handle phone != NaN in python)
df[‘phone_exist’]=df[df[‘phone’]!=NaN] ???

fiter out rows where phone number is atleast 11 characters
first convert everythihng to strings haha, fdf['phone']=fdf['phone'].astype(str)
fdf=df[df[‘phone’].str.length() < 11] i guess thats how it should work? thats what happens in c++, not sure about python lol// yuh this was perfect!!!

filter rows w number>50 and also convert to string for future use
fdf=df[df['number']>50]
fdf['number']=fdf['number'].astype(str) //btw can you explain this astype feature of python? does this just convert integers to the literal string, like 12='12' now?
also, you mustve been asking for a way to do this in one step right? what is it

create a new coloumn where all ints are converted to sring and preceeded by id
fdf=df['roll_no'].astype(str)
fdf['roll_id']='ID'+fdf['roll_no'].astype(str) //is this it?

filter based on coloumn number
fdf=df[df.iloc[:,1]=='19'] //i dont care about readability lmao, just getting better haha
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
we used df['phone_exist']=df['phone'].notna(), can you show me a use of ~ also? will it just be  df['exist']=~df['phone'].isna()?
